/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.3.72"

    // Apply the application plugin to add support for building a CLI application.
    application
}

group = "app.roomtorent"
version = "1.0-SNAPSHOT"

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.]
    mavenCentral()
    jcenter()
}
val serializationVersion = "0.20.0"
val ktorVersion = "1.3.2"

val settings: org.jetbrains.kotlin.gradle.plugin.LanguageSettingsBuilder.() -> Unit = {
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    implementation(kotlin("stdlib-jdk8"))
    implementation("com.github.kittinunf.fuel:fuel:2.2.2")
    implementation("com.beust:klaxon:5.2")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion")
    implementation("io.ktor:ktor-server-core:$ktorVersion")
//                implementation("io.ktor:ktor-server-netty:$ktorVersion")
    implementation("io.ktor:ktor-server-jetty:$ktorVersion")
    implementation("io.ktor:ktor-network-tls:$ktorVersion")
}

application {
    // Define the main class for the application.
    mainClassName = "app.roomtorent.figmatocompose.EngineMain"

}
val fatJar = task("fatJar", type = Jar::class) {
    archiveClassifier.set("all")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes("Main-Class" to "app.reverserent.figmatocompose.EngineMain")
    }
    from(configurations.runtimeClasspath.get()
        .onEach { println("add from dependencies: ${it.name}") }
        .map { if (it.isDirectory) it else zipTree(it) })
    val sourcesMain = sourceSets.main.get()
    sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
    from(sourcesMain.output)
}

val compileKotlin: org.jetbrains.kotlin.gradle.tasks.KotlinCompile by tasks

compileKotlin.kotlinOptions.apply {
    suppressWarnings = true
    languageVersion = "1.4" // possible values: '1.0', '1.1', '1.2', '1.3'
    apiVersion = "1.4" // possible values: '1.0', '1.1', '1.2', '1.3'
}


tasks {
    "build" {
        dependsOn(fatJar)
    }
}
